<div class="theme-toggle-wrapper" data-theme-toggle-root>
  <button
    class="theme-toggle"
    type="button"
    data-theme-toggle
    aria-pressed="false"
    aria-label="Switch to dark mode"
    title="Switch to dark mode"
  >
    <span class="theme-toggle__icon" aria-hidden="true">🌙</span>
    <span class="theme-toggle__text">Switch theme</span>
  </button>
</div>

<script is:inline>
  const storageKey = 'horizonomega-theme';
  const script = document.currentScript;
  const container = script?.previousElementSibling;
  const button = container?.querySelector('[data-theme-toggle]');
  const icon = container?.querySelector('.theme-toggle__icon');
  const text = container?.querySelector('.theme-toggle__text');
  const ICONS = { light: '☀️', dark: '🌙' };
  const LABELS = {
    light: 'Switch to dark mode',
    dark: 'Switch to light mode'
  };

  const getTheme = () =>
    document.documentElement.dataset.theme === 'dark' ? 'dark' : 'light';

  const applyTheme = (theme, persist = true) => {
    document.documentElement.dataset.theme = theme;
    document.documentElement.style.colorScheme = theme;
    if (persist) {
      try {
        localStorage.setItem(storageKey, theme);
      } catch {
        /* ignore write errors */
      }
    }
  };

  const updateToggleUI = (theme) => {
    const nextTheme = theme === 'dark' ? 'light' : 'dark';
    if (button) {
      button.setAttribute('aria-pressed', theme === 'dark');
      button.dataset.nextTheme = nextTheme;
      button.setAttribute('aria-label', LABELS[nextTheme]);
      button.title = LABELS[nextTheme];
    }
    if (icon) {
      icon.textContent = ICONS[nextTheme];
    }
    if (text) {
      text.textContent = LABELS[nextTheme];
    }
  };

  updateToggleUI(getTheme());

  button?.addEventListener('click', () => {
    const nextTheme = button.dataset.nextTheme === 'dark' ? 'dark' : 'light';
    applyTheme(nextTheme);
    updateToggleUI(nextTheme);
  });

  const observer = new MutationObserver(() => {
    updateToggleUI(getTheme());
  });

  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['data-theme']
  });

  window.addEventListener('beforeunload', () => observer.disconnect());

  window.addEventListener('storage', (event) => {
    if (event.key === storageKey) {
      const theme = event.newValue === 'dark' ? 'dark' : 'light';
      applyTheme(theme, false);
      updateToggleUI(theme);
    }
  });
</script>


<style>
  .theme-toggle {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.35rem;
    width: 2.25rem;
    height: 2.25rem;
    border-radius: 999px;
    border: 1px solid var(--color-border-subtle);
    background: var(--color-surface);
    color: var(--color-text-muted);
    cursor: pointer;
    transition: background 0.2s ease, color 0.2s ease,
      border-color 0.2s ease, transform 0.2s ease;
  }

  .theme-toggle:hover {
    background: var(--color-surface-hover);
    color: var(--color-text-primary);
    border-color: var(--color-border-strong);
    transform: translateY(-1px);
  }

  .theme-toggle:focus-visible {
    outline: 2px solid var(--color-outline);
    outline-offset: 3px;
  }

  .theme-toggle__icon {
    font-size: 1.05rem;
    line-height: 1;
    transition: transform 0.2s ease;
  }

  .theme-toggle:hover .theme-toggle__icon {
    transform: scale(1.05);
  }

  .theme-toggle__text {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>
