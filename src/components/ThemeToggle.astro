---
const currentLocale = Astro.currentLocale || 'en';
const isFrench = currentLocale === 'fr';
const initialLabel = isFrench ? 'Passer en mode sombre' : 'Switch to dark mode';
---

<div class="theme-toggle-wrapper" data-theme-toggle-root>
  <button
    class="theme-toggle"
    type="button"
    data-theme-toggle
    data-locale={currentLocale}
    aria-pressed="false"
    aria-label={initialLabel}
    title={initialLabel}
  >
    <svg class="theme-toggle__icon theme-toggle__icon--moon" width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
      <path d="M14 8.5C13.5 10.5 11.5 12 9 12C6 12 3.5 9.5 3.5 6.5C3.5 4 5 2 7 1.5C4.5 2 2.5 4.5 2.5 7.5C2.5 11 5.5 14 9 14C11.5 14 13.5 12.5 14.5 10.5C14.3 9.8 14.2 9.2 14 8.5Z"/>
    </svg>
    <svg class="theme-toggle__icon theme-toggle__icon--sun" width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
      <circle cx="8" cy="8" r="3.5"/>
      <line x1="8" y1="0.5" x2="8" y2="2.5"/>
      <line x1="8" y1="13.5" x2="8" y2="15.5"/>
      <line x1="15.5" y1="8" x2="13.5" y2="8"/>
      <line x1="2.5" y1="8" x2="0.5" y2="8"/>
      <line x1="13.3" y1="2.7" x2="11.9" y2="4.1"/>
      <line x1="4.1" y1="11.9" x2="2.7" y2="13.3"/>
      <line x1="13.3" y1="13.3" x2="11.9" y2="11.9"/>
      <line x1="4.1" y1="4.1" x2="2.7" y2="2.7"/>
    </svg>
    <span class="theme-toggle__text">Switch theme</span>
  </button>
</div>

<script is:inline>
  (function() {
    const storageKey = 'horizonomega-theme';
    const button = document.querySelector('[data-theme-toggle]');
    const moonIcon = document.querySelector('.theme-toggle__icon--moon');
    const sunIcon = document.querySelector('.theme-toggle__icon--sun');
    const text = document.querySelector('.theme-toggle__text');
    const locale = button?.dataset?.locale || 'en';
    const isFrench = locale === 'fr';
    const LABELS = isFrench ? {
      dark: 'Passer en mode sombre',
      light: 'Passer en mode clair'
    } : {
      dark: 'Switch to dark mode',
      light: 'Switch to light mode'
    };

    const getTheme = () =>
      document.documentElement.dataset.theme === 'dark' ? 'dark' : 'light';

    const applyTheme = (theme, persist = true) => {
      document.documentElement.dataset.theme = theme;
      document.documentElement.style.colorScheme = theme;
      if (persist) {
        try {
          localStorage.setItem(storageKey, theme);
        } catch {
          /* ignore write errors */
        }
      }
    };

    const updateToggleUI = (theme) => {
      const nextTheme = theme === 'dark' ? 'light' : 'dark';
      if (button) {
        button.setAttribute('aria-pressed', theme === 'dark');
        button.dataset.nextTheme = nextTheme;
        button.setAttribute('aria-label', LABELS[nextTheme]);
        button.title = LABELS[nextTheme];
      }
      if (moonIcon && sunIcon) {
        if (nextTheme === 'dark') {
          moonIcon.style.display = 'block';
          sunIcon.style.display = 'none';
        } else {
          moonIcon.style.display = 'none';
          sunIcon.style.display = 'block';
        }
      }
      if (text) {
        text.textContent = LABELS[nextTheme];
      }
    };

    updateToggleUI(getTheme());

    button?.addEventListener('click', () => {
      const nextTheme = button.dataset.nextTheme === 'dark' ? 'dark' : 'light';
      applyTheme(nextTheme);
      updateToggleUI(nextTheme);
    });

    const observer = new MutationObserver(() => {
      updateToggleUI(getTheme());
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme']
    });

    window.addEventListener('beforeunload', () => observer.disconnect());

    window.addEventListener('storage', (event) => {
      if (event.key === storageKey) {
        const theme = event.newValue === 'dark' ? 'dark' : 'light';
        applyTheme(theme, false);
        updateToggleUI(theme);
      }
    });
  })();
</script>


<style>
  .theme-toggle {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.35rem;
    width: 2.25rem;
    height: 2.25rem;
    border-radius: 999px;
    border: 1px solid var(--color-border-subtle);
    background: var(--color-surface);
    color: var(--color-text-muted);
    cursor: pointer;
    transition: background 0.2s ease, color 0.2s ease,
      border-color 0.2s ease, transform 0.2s ease;
  }

  .theme-toggle:hover {
    background: var(--color-surface-hover);
    color: var(--color-text-primary);
    border-color: var(--color-border-strong);
    transform: translateY(-1px);
  }

  .theme-toggle:focus-visible {
    outline: 2px solid var(--color-outline);
    outline-offset: 3px;
  }

  .theme-toggle__icon {
    display: block;
    width: 16px;
    height: 16px;
    transition: transform 0.2s ease;
  }

  .theme-toggle:hover .theme-toggle__icon {
    transform: scale(1.05);
  }
  
  .theme-toggle__icon--sun {
    display: none;
  }
  
  .theme-toggle__icon--moon {
    display: block;
  }

  .theme-toggle__text {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
</style>
